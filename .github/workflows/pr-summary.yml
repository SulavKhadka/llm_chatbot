name: PR Summary Generator
on:
  pull_request:
    types: [opened, synchronize]

jobs:
  summarize:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get PR diff
        id: get-diff
        run: |
          if [ "${{ github.event.action }}" = "opened" ]; then
            # For newly opened PRs, get the full diff
            git fetch origin ${{ github.base_ref }}
            DIFF=$(git diff origin/${{ github.base_ref }}...HEAD)
          else
            # For synchronized PRs, get only the diff of new changes
            git fetch origin ${{ github.event.before }}
            DIFF=$(git diff ${{ github.event.before }}...${{ github.event.after }})
          fi
          echo "DIFF<<EOF" >> $GITHUB_ENV
          echo "$DIFF" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Install OpenAI
        run: npm install openai@^4.0.0

      - name: Generate Summary
        id: summary
        uses: actions/github-script@v7
        env:
          INFERENCE_API_URL: ${{ vars.INFERENCE_API_URL}}
          INFERENCE_API_KEY: ${{ secrets.INFERENCE_API_KEY }}
        with:
          script: |
            const { OpenAI } = require("openai");
            const client = new OpenAI({
              apiKey: process.env.INFERENCE_API_KEY,
              baseURL: process.env.INFERENCE_API_URL
            });

            const diff = process.env.DIFF;
            
            // Skip if there are no changes
            if (!diff?.trim()) {
              console.log("No changes detected in this update");
              return;
            }

            const completion = await client.chat.completions.create({
              model: "anthropic/claude-3-5-haiku-20241022",
              messages: [{
                role: "system",
                content: "You are a helpful assistant that summarizes git diffs. Be concise and focus on the key changes and be sure to give context while being brief. Your output is always in markdown format and only contains the summary, as whatever you return will be pasted into the PR request thread as a comment."
              }, {
                role: "user",
                content: `Please summarize these changes:\n${diff}`
              }],
            });
            
            const summary = completion.choices[0].message.content;
            console.log(summary);

            const summaryType = process.env.SUMMARY_TYPE || 'Changes';

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `## ðŸ¤– Automated PR Summary - ${summaryType}\n\n${summary}`
            });